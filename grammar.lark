%import common.WS
%import common.C_COMMENT
%import common.SQL_COMMENT

%ignore WS
%ignore SQL_COMMENT
%ignore C_COMMENT

start:  _statement+
_statement: record | define | guess | assert_ | deny_ | try_assert | try_deny | show | asp_block
record: "record" record_declaration SEMICOLON
record_declaration: RECORD_NAME COLON declarations
declarations: declaration (COMMA declaration)*
declaration: NAME COLON attr_type
define: def_1 | def_2 | def_3
def_1: define_definition define_from? define_where ";"
def_2: define_definition define_from? define_where aggregate ";"
def_3: define_definition define_from? aggregate SEMICOLON
define_definition: "define" RECORD_NAME as_statement?
as_statement: "as" NAME
define_from: "from" define_record (COMMA define_record)*
define_record: NOT? RECORD_NAME ("as" NAME)?
define_where: "where" where_define_statement (AND where_define_statement)*
where_define_statement: define_expression operator define_expression
guess: guess_def_1 | guess_def_2
guess_def_1: "guess" from_guess where_guess? guess_times? guess_definitions SEMICOLON
guess_def_2: "guess" from_guess where_guess? guess_aggregate guess_times? guess_definitions SEMICOLON
from_guess: "from" guess_record (COMMA guess_record)*
guess_record: NOT? RECORD_NAME ("as" NAME)?
where_guess: "where"  where_guess_statement (AND where_guess_statement)*
where_guess_statement: var_guess_exp (operator var_guess_exp)
guess_times: times times_exp (AND guess_times)*
times_exp: (INT| times_value | range_times | abs_times) | times_exp (PLUS | MINUS | TIMES | DIVIDED_BY) times_exp | OB times_exp CB
guess_definitions: guess_definition+
guess_definition: RECORD_NAME ("as" NAME)? guess_declaration
guess_declaration: guess_from? guess_where
guess_from: "from" record_guess (COMMA record_guess)*
record_guess: NOT? RECORD_NAME ("as" NAME)?
guess_where: "where"  guess_where_statement (AND guess_where_statement)*
guess_where_statement: var_guess_exp_2 operator var_guess_exp_2
assert_: assert_statement SEMICOLON
deny_: deny SEMICOLON
assert_statement: assert_1 | assert_2 | assert_3
assert_1: assert_definition assert_from? where_assert
assert_2: assert_definition assert_from? where_assert aggregate
assert_3: assert_definition assert_from? aggregate
assert_definition: "deny unless" assert_records (OR assert_records)*
assert_records: RECORD_NAME ("as" NAME)?
assert_from: "from" assert_record (COMMA assert_record)*
assert_record: NOT? RECORD_NAME ("as" NAME)?
where_assert: "where" where_assert_statement (AND where_assert_statement)*
where_assert_statement: var_expression operator var_expression
deny: deny_1 | deny_2
deny_1: "deny" deny_from where_deny aggregate?
deny_2: "deny" deny_from aggregate
deny_from: "from" deny_record (COMMA deny_record)*
deny_record: NOT? RECORD_NAME ("as" NAME)?
where_deny: "where" where_deny_statement (AND where_deny_statement)*
where_deny_statement: var_expression operator var_expression
try_assert: assert_otherwise "otherwise" pay_statement SEMICOLON
assert_otherwise: assert_otherwise_1 | assert_otherwise_2 | assert_otherwise_3 | assert_otherwise_4
assert_otherwise_1: assert_definition assert_from? where_assert
assert_otherwise_2: assert_definition assert_from? where_assert aggregate
assert_otherwise_3: assert_definition assert_from? aggregate
assert_otherwise_4: assert_definition
pay_statement: "pay" arithmetic_operation "at" arithmetic_operation
try_deny: deny_otherwise "or" pay_statement SEMICOLON
deny_otherwise: deny_otherwise_1 | deny_otherwise_2 | deny_otherwise_3
deny_otherwise_1: "deny" deny_from where_deny aggregate?
deny_otherwise_2: "deny" deny_from aggregate
deny_otherwise_3: "deny" deny_from
pay: (NAME | RECORD_NAME) (DOT NAME)+
arithmetic_operation: (pay | INT | range2 | abs2) | (PLUS | MINUS) INT | arithmetic_operation (PLUS | MINUS | TIMES | DIVIDED_BY) arithmetic_operation | OB arithmetic_operation CB
guess_aggregate: "having" aggr_def_guess (AND aggr_def_guess)*
aggr_def_guess: (COUNT | SUM_OF | MIN | MAX) "{" aggr_body_guess (SEMICOLON aggr_body_guess)* "}" operator aggregate_term_guess_exp
aggr_body_guess: aggr_body_guess1 | aggr_body_guess2
aggr_body_guess1: aggr_records_guess aggregate_from_guess? aggr_where_guess
aggr_body_guess2: aggr_records_guess aggregate_from_guess?
aggr_records_guess: aggregate_expression (COMMA aggregate_expression)*
aggregate_from_guess: "from" aggr_record_guess (COMMA aggr_record_guess)*
aggr_record_guess: NOT? RECORD_NAME ("as" NAME)?
aggr_where_guess: "where" where_aggr_guess (AND where_aggr_guess)*
where_aggr_guess: aggr_guess_exp operator aggr_guess_exp
aggregate_term_guess_exp: aggregate_terms_guess | abs_term_guess  | aggregate_term_guess_exp (PLUS | MINUS | TIMES | DIVIDED_BY) aggregate_term_guess_exp | OB aggregate_term_guess_exp CB
aggregate_terms_guess: aggregate_term_guess (".." aggregate_term_guess)?
aggregate_term_guess: ((NAME | RECORD_NAME) (DOT NAME)*)| INT
abs_term_guess: ABS (MINUS)? aggregate_term_guess_exp ABS
aggregate: "having" aggr_def (AND aggr_def)*
aggr_def: (COUNT | SUM_OF | MIN | MAX) "{" aggr_body (SEMICOLON aggr_body)* "}" operator aggregate_term_exp
aggr_body: aggr_body_1 | aggr_body_2
aggr_body_1: aggr_records aggregate_from? aggr_where
aggr_body_2: aggr_records aggregate_from?
aggr_records: aggregate_expression (COMMA aggregate_expression)*
aggregate_from: "from" aggr_record (COMMA aggr_record)*
aggr_record: NOT? RECORD_NAME ("as" NAME)?
aggr_where: "where" where_aggr_statement (AND where_aggr_statement)*
where_aggr_statement: exp_aggr_define operator exp_aggr_define
show: "show" RECORD_NAME (COMMA RECORD_NAME)* SEMICOLON
asp_block: "@asp_block" "$" asp "$"
define_expression: var_define | define_expression (PLUS | MINUS | TIMES | DIVIDED_BY) define_expression | OB define_expression CB
var_expression: var | var_expression (PLUS | MINUS | TIMES | DIVIDED_BY) var_expression | OB var_expression CB
aggregate_expression: (aggregate_record|INT) | aggregate_expression (PLUS | MINUS | TIMES | DIVIDED_BY) aggregate_expression | OB aggregate_expression CB
aggregate_record: (NAME | RECORD_NAME) (DOT NAME)*
aggregate_term_exp: aggregate_terms | abs_aggregate_term | aggregate_term_exp (PLUS | MINUS | TIMES | DIVIDED_BY) aggregate_term_exp | OB aggregate_term_exp CB
aggregate_terms: aggregate_term (".." aggregate_term)?
abs_aggregate_term: ABS (MINUS)? aggregate_term_exp ABS
aggregate_term: ((NAME | RECORD_NAME) (DOT NAME)*) | INT
var_guess_exp: var_guess | var_guess_exp (PLUS | MINUS | TIMES | DIVIDED_BY) var_guess_exp | OB var_guess_exp CB
asp: /[^$]+/
var_guess:  INT | STR | value_guess | range_guess | abs_guess
abs_guess: ABS (MINUS)? var_guess_exp ABS
range_guess: (INT|value_guess) ".." (INT| value_guess)
value_guess: (NAME | RECORD_NAME) (DOT NAME)*
range_times: (INT| times_value) ".." (INT|times_value)
abs_times: ABS (MINUS)? times_exp ABS
times_value: (NAME | RECORD_NAME) (DOT NAME)+
value: (NAME | RECORD_NAME) (DOT NAME)*
var_guess_exp_2: var_guess_2  | var_guess_exp_2 (PLUS | MINUS | TIMES | DIVIDED_BY) var_guess_exp_2 | OB var_guess_exp_2 CB
var_guess_2:  INT | STR | value_guess_2 | range_guess_2 | abs_guess_2
abs_guess_2: ABS (MINUS)? var_guess_exp_2 ABS
range_guess_2: (INT|value_guess_2) ".." (INT| value_guess_2)
var: INT | STR | value | range_var | abs_var
abs_var: ABS (MINUS)? var_expression ABS
range_var: (INT|value) ".." (INT| value)
value_guess_2: (NAME | RECORD_NAME) (DOT NAME)*
var_define: INT | STR | value_define | range_define | abs_define
abs_define: ABS (MINUS)? define_expression ABS
range_define: (INT|value_define) ".." (INT|value_define)
range2: (pay | INT) ".." (pay | INT)
abs2: ABS arithmetic_operation ABS
aggr_guess_exp: var_aggr_guess | aggr_guess_exp (PLUS | MINUS | TIMES | DIVIDED_BY) aggr_guess_exp | OB aggr_guess_exp CB
exp_aggr_define: var_aggr_define | exp_aggr_define (PLUS | MINUS | TIMES | DIVIDED_BY) exp_aggr_define | OB exp_aggr_define CB
var_aggr_define: INT | STR | value_aggr_define | range_aggr_define | abs_aggr_define
abs_aggr_define: ABS (MINUS)? exp_aggr_define ABS
range_aggr_define: (INT|value_aggr_define) ".." (INT|value_aggr_define)
var_aggr_guess: INT | STR | value_aggr_guess | range_aggr_guess | abs_aggr_guess
abs_aggr_guess: ABS (MINUS)? aggr_guess_exp ABS
range_aggr_guess: (INT|value_aggr_guess) ".." (INT|value_aggr_guess)
value_aggr_define: (NAME | RECORD_NAME) (DOT NAME)*
value_aggr_guess: (NAME | RECORD_NAME) (DOT NAME)*
value_define: (NAME | RECORD_NAME) (DOT NAME)*
operator: op+
op:  EQUALITY | LT | LE | GT | GE | NOTEQUAL | ASSIGN
bool_operator: AND | OR
times: EXACTLY | ATLEAST | ATMOST
attr_type: ANY | STRING | INTEGER | RECORD_NAME | REGEX
REGEX: "r"/"[^"]+"/
NAME: /[a-z_][a-z0-9_]*/
RECORD_NAME: /[A-Z][a-zA-Z0-9_]*/
COLON: ":"
SEMICOLON: ";"
COMMA: ","
DOT: "."
PLUS: "+"
MINUS: "-"
TIMES: "*"
DIVIDED_BY: "/"
ABS: "|"
OB: "("
CB: ")"
EQUALITY: "=="
NOTEQUAL: "!="
GE: ">="
GT: ">"
LT: "<"
LE: "<="
ASSIGN: "="
AND: "and"
NOT: "not"
OR: "or"
COUNT: "count"
SUM_OF: "sum"
EXACTLY: "exactly"
ATLEAST: "at least"
ATMOST: "at most"
ANY: "any"
STRING: "str"
INTEGER: "int"
MAX: "max"
MIN: "min"
STR: /"[^"]*"/
INT: /[0-9]+/