@entity Resolution: value: int;
@entity Video: type: str;
@entity F: video: Video, resolution: Resolution, bit_rate: Bit_rate, sat_value: Sat;
@entity Bit_rate: value: int;
@entity Sat: value: int;
@entity User: id: int, video: Video, resolution: Resolution, max_sat: Sat, max_bit: Bit_rate;
@entity MaxRepresentation: value: int;
@entity R: video: Video, resolution: Resolution, bit_rate: Bit_rate, sat_value: Sat;
@entity GlobalCapacity: value: int;
@entity Assign: user:User, bit_rate: Bit_rate, sat_value: Sat;
@entity FractionUser: value: int;


guess from MaxRepresentation as m
	where m.value=2
		exactly m.value
			R as r
				from F as f, User as user
					where r.bit_rate.value<=user.max_bit.value and user.video=r.video and user.resolution=r.resolution and f.video=r.video and f.resolution=r.resolution and f.bit_rate=r.bit_rate and f.sat_value=r.sat_value;

guess from User as user, Bit_rate as n, Video as v
	where user.max_bit=n and user.max_bit.value=2
		Assign as a
			from F as f
				where f.bit_rate.value<=user.max_bit.value and f.video=user.video and f.resolution=user.resolution and a.user=user and a.bit_rate=f.bit_rate and a.sat_value=f.sat_value;


define Sat
	from F as f
		count of {f2.video from F as f2 where f2.video=f.video}>0
		where Sat.value=2 and f.sat_value=Sat;

define Bit_rate as b
	from Assign as a, Sat as s
		where a.sat_value.value=s.value and a.bit_rate=b;

define Sat
	from Assign as a, Video as v
		where a.sat_value.value=Sat.value and a.user.video=v;

deny from User as user, Assign as a, Resolution as r, Video as v, Bit_rate as b, Sat as s
	where user.resolution=r and user.video=v and user.max_bit=b and user.max_sat=s and a.user=user;

@entity Bandwidth: value: int;

guess from F, Resolution as r
	where F.resolution.value==1 and F.resolution=r and r.value<=4
		at_most 1 and at_least F.resolution.value
			Bit_rate as b2
				where b2.value=F.resolution.value
			Sat
				from Assign as a3, Bit_rate
					where a3.sat_value=Sat and a3.sat_value.value=2;

deny from Assign as a, Sat as s
	where a.sat_value.value=1 and a.sat_value=s;


deny unless R as r 
	from Assign as a 
		min of {r2.resolution.value from R as r2 where r2.video.type=r.video.type}>2
		where r.video=a.user.video and r.resolution=a.user.resolution and r.bit_rate=a.bit_rate and r.sat_value=a.sat_value;


deny unless Bit_rate as b or Bandwidth as band
	from Sat as s
		where b.value=s.value and band.value=s.value
			or pay b.value at s.value;

deny from Sat
	where Sat.value=2
		or pay 1 at 3;
